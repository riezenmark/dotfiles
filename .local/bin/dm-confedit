#!/usr/bin/env bash
#
# Script name: dm-confedit
# Description: Choose from a list of configuration files to edit.
# Dependencies: dmenu, fzf, rofi, emacsclient (edit DMEDITOR variable in config if you prefer another editor)
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Derek Taylor
#               Simon Ingelsson
#               HostGrady

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

# shellcheck disable=SC1091
source ~/.local/bin/_dm-helper.sh 2>/dev/null

source_dmscripts_configs

if configs_are_different; then
    echo "$(date): configs are different" >>"$DM_CONFIG_DIFF_LOGFILE"
    sleep 1
fi

gen_static_entries() {
    XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
    local dyn
    # shellcheck disable=SC2154
    confedit_find_prog="${confedit_find_prog:-find}"
    if [ -n "$confedit_exclude_dirs" ]; then
        dyn="$($confedit_find_prog "$XDG_CONFIG_HOME" | grep -viE "$confedit_exclude_dirs")"
    else

        dyn="$($confedit_find_prog "$XDG_CONFIG_HOME")"
    fi

    IFS=$'\n'
    for _path in $dyn; do
        [ ! -f "$_path" ] && continue
        # this is equvilent to a bunch of sed commands this should be faster though
        dyn_name="${_path/$XDG_CONFIG_HOME/}"
        dyn_name="${dyn_name//\// }"
        dyn_name="${dyn_name/ /}"
        echo "confedit_list[$dyn_name]=\"$_path\""
    done
    IFS=" "

}

main() {

    if [ -z "${!confedit_list[*]}" ]; then
        notify-send "dm-confedit: BREAKING CHANGES" "Due to breaking changes you must edit all declare statements in your config to include the g option. declare -A -> declare -Ag, declare -a -> declare -ag"
        echo "$(date): dm-confedit: BREAKING CHANGES: Due to breaking changes you must edit all declare statements in your config to include the g option.
are -A -> declare -Ag
are -a -> declare -ag" >>"$DM_CONFIG_DIFF_LOGFILE"
        sleep 2
        exit 1
    fi
    # Clean options array making sure that the files exist
    declare -A _clean_list

    # As this is loaded from other file it is technically not defined
    # This is done all throughout this script because of how often variables are used
    # shellcheck disable=SC2154
    if [ "$confedit_isdynamic" = "yes" ]; then
        # dynamically add additional entries
        XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
        local dyn
        # shellcheck disable=SC2154
        confedit_find_prog="${confedit_find_prog:-find}"
        if [ -n "$confedit_exclude_dirs" ]; then
            dyn="$($confedit_find_prog "$XDG_CONFIG_HOME" | grep -viE "$confedit_exclude_dirs")"
        else

            dyn="$($confedit_find_prog "$XDG_CONFIG_HOME")"
        fi

        IFS=$'\n'
        for _path in $dyn; do
            [ ! -f "$_path" ] && continue
            dyn_name="${_path/$XDG_CONFIG_HOME/}"
            dyn_name="${dyn_name//\// }"
            _clean_list["dynamic: $dyn_name"]="$_path"
        done
        IFS=" "
    fi

    # shellcheck disable=SC2154
    for i in "${!confedit_list[@]}"; do

        if printf "%s\n" "${_clean_list[@]}" | grep -qw "${confedit_list["${i}"]}"; then
            continue
        fi

        [[ -f ${confedit_list["${i}"]} ]] && _clean_list["static:   ${i}"]=${confedit_list["${i}"]}
    done
    # Piping the above array (cleaned) into dmenu.
    # We use "printf '%s\n'" to format the array one item to a line.
    choice=$(printf '%s\n' "${!_clean_list[@]}" | sort | ${MENU} 'Edit config:' "$@")

    # What to do when/if we choose a file to edit.
    if [ "$choice" ]; then
        cfg=$(printf '%s\n' "${_clean_list["${choice}"]}")
        # shellcheck disable=SC2154
        $DMEDITOR "$cfg"
    # What to do if we just escape without choosing anything.
    else
        echo "Program terminated." && exit 0
    fi
}

no_opt=1
# If script is run with '-d', it will use 'dmenu'
# If script is run with '-f', it will use 'fzf'
# If script is run with '-d', it will use 'rofi'
while getopts "gdfrh" arg 2>/dev/null; do
    case "${arg}" in
    g) # shellcheck disable=SC2153
        gen_static_entries
        exit
        ;;
    d) # shellcheck disable=SC2153
        MENU=${DMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    f) # shellcheck disable=SC2153
        MENU=${FMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    r) # shellcheck disable=SC2153
        MENU=${RMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "@"
        ;;
    h)
        printf "Usage: dm-confedit [options]
Description: Choose from a list of configuration files to edit.
Dependencies: dmenu, fzf, rofi, emacsclient (edit DMEDITOR variable in config if you prefer another editor)

The folowing OPTIONS are accepted:
    -h  displays this help page
    -d  runs the script using 'dmenu'
    -f  runs the script using 'fzf'
    -r  runs the script using 'rofi'
    -g  generate static entries and exit

Running dm-confedit without any argument defaults to using 'dmenu'
Run 'man dmscripts' for more information\n"
        ;;
    *) printf '%s\n' "Error: invalid option" "Type $(basename "$0") -h for help" ;;
    esac
    no_opt=0
done

# If script is run with NO argument, it will use 'dmenu'
[ $no_opt = 1 ] && MENU=${DMENU} && [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"

