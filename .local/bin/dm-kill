#!/usr/bin/env bash
#
# Script name: dm-kill
# Description: Search for a process to kill.
# Dependencies: dmenu, fzf, rofi
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Derek Taylor
#               HostGrady

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

# shellcheck disable=SC1091
source ~/.local/bin/_dm-helper.sh 2>/dev/null || source _dm-helper.sh 2>/dev/null

source_dmscripts_configs

if configs_are_different; then
    echo "$(date): configs are different" >>"$DM_CONFIG_DIFF_LOGFILE"
    sleep 1
fi

main() {
    # Running ps to get running processes and display in dmenu.
    # In this script we use a variable called $DMENU, in your scripts, you
    # should just write dmenu or rofi or whatever launcher you use.
    selected="$(ps --user "$USER" -F \
        | ${MENU} "Search for process to kill:" \
        | awk '{print $2" "$11}')"

    # Nested 'if' statements.  The outer 'if' statement is what to do
    # when we select one of the 'selected' options listed in dmenu.
    if [[ -n $selected ]]; then
        # Piping No/Yes into dmenu as a safety measure, in case you
        answer="$(echo -e "Yes\nNo" | ${MENU} "Kill $selected?")"

        if [[ $answer == "Yes" ]]; then
            # This echo command prints everything before the first space.
            # Luke Smith has a video on why this is most efficient in this case
            # An alternative way to do it would be with awk or cut, both are less
            # efficient however.
            kill -9 "${selected%% *}"
            echo "Process $selected has been killed." && exit 0
        else
            # We want this script to exit with a 1 and not 0 because 1 means
            # an error, so this can be handled by other scripts better
            echo "User choose not to kill a process." && exit 1
        fi
    fi
}

MENU="$(get_menu_program "$@")"
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main

